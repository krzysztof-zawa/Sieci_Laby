{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b35f11f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f5d4e416",
   "metadata": {},
   "outputs": [],
   "source": [
    "class activation_fcn(object):\n",
    "    def __init__(self):\n",
    "        self.functions = {\n",
    "    'linear': self.linear,\n",
    "    'sigmoid': self.logistic,\n",
    "    'logistic': self.logistic,\n",
    "    'tanh': self.tanh,\n",
    "    'relu': self.relu\n",
    "    }\n",
    "    def output(self, layer, name):\n",
    "        if name in self.functions:\n",
    "            return self.functions[name](layer)\n",
    "        else:\n",
    "            sys.exit(f\"Error: Activation function '{name}' not found.\")\n",
    "    def linear(self, layer):\n",
    "        return layer['activation_potential']\n",
    "    \n",
    "    def logistic(self, layer):\n",
    "        return 1 / (1 + np.exp(-layer['activation_potential']))\n",
    "    \n",
    "    def tanh(self, layer):\n",
    "        return np.tanh(layer['activation_potential'])\n",
    "    \n",
    "    def relu(self, layer):\n",
    "        return np.maximum(0, layer['activation_potential'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "68ac290b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear: [-2 -1  0  1  2]\n",
      "Sigmoid: [0.11920292 0.26894142 0.5        0.73105858 0.88079708]\n",
      "Tanh: [-0.96402758 -0.76159416  0.          0.76159416  0.96402758]\n",
      "ReLU: [0 0 0 1 2]\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    # Tworzymy przykładową warstwę z potencjałem aktywacyjnym\n",
    "    layer = {'activation_potential': np.array([-2, -1, 0, 1, 2])}\n",
    "    \n",
    "    # Tworzymy obiekt klasy activation_fcn\n",
    "    activation = activation_fcn()\n",
    "    \n",
    "    # Testujemy różne funkcje aktywacji\n",
    "    print(\"Linear:\", activation.output(layer, 'linear'))\n",
    "    print(\"Sigmoid:\", activation.output(layer, 'sigmoid'))\n",
    "    print(\"Tanh:\", activation.output(layer, 'tanh'))\n",
    "    print(\"ReLU:\", activation.output(layer, 'relu'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ef03966",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
