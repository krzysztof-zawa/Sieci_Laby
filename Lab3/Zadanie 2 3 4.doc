{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "403b05d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sys\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6ce7b979",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Neural_network(object):\n",
    "    def __init__(self, structure=None, init_weight=None):\n",
    "        self.af = Activation_fcn()\n",
    "        if structure:\n",
    "            self.create_network(structure, init_weight)\n",
    "            \n",
    "    def create_network(self, structure, init_weight):\n",
    "        self.nnetwork = [structure[0]]\n",
    "        \n",
    "        if init_weight == 'zero':\n",
    "            for i in range(1, len(structure)):\n",
    "                new_layer = {\n",
    "                    # Tu należy wykonać odpowiedniej modyfikacje\n",
    "                    'weights': np.zeros((structure[i]['units'], structure[i-1]['units'])),\n",
    "                    'activation_function': structure[i]['activation_function'],\n",
    "                    'activation_potential': None,\n",
    "                    'delta': None,\n",
    "                    'output': None}\n",
    "                self.nnetwork.append(new_layer)\n",
    "        \n",
    "        if init_weight == 'one':\n",
    "            for i in range(1, len(structure)):\n",
    "                new_layer = {\n",
    "                    # Tu należy wykonać odpowiedniej modyfikacje\n",
    "                    'weights': np.ones((structure[i]['units'], structure[i-1]['units'])),\n",
    "                    'activation_function': structure[i]['activation_function'],\n",
    "                    'activation_potential': None,\n",
    "                    'delta': None,\n",
    "                    'output': None}\n",
    "                self.nnetwork.append(new_layer)\n",
    "        if init_weight == 'rand':\n",
    "            for i in range(1, len(structure)):\n",
    "                new_layer = {\n",
    "                    # Tu należy wykonać odpowiedniej modyfikacje\n",
    "                    'weights': np.random.randn(structure[i]['units'], structure[i-1]['units']),\n",
    "                    'activation_function': structure[i]['activation_function'],\n",
    "                    'activation_potential': None,\n",
    "                    'delta': None,\n",
    "                    'output': None}\n",
    "                self.nnetwork.append(new_layer)\n",
    "        return self.nnetwork\n",
    "    \n",
    "    def forward_propagate(self, inputs):\n",
    "        inp = inputs.flatten()  \n",
    "        for i in range(1, len(self.nnetwork)):\n",
    "            layer = self.nnetwork[i]\n",
    "            \n",
    "            layer['activation_potential'] = np.matmul(layer['weights'], inp) \n",
    "            \n",
    "            layer['output'] = self.af.output(layer['activation_potential'], layer['activation_function'])\n",
    "            inp = layer['output'] \n",
    "        return inp  \n",
    "\n",
    "    def predict(self, nnetwork, inputs):\n",
    "        out = []\n",
    "        for input in inputs:\n",
    "            output = self.forward_propagate(input)\n",
    "            out.append(output)\n",
    "        return out\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "19161323",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Activation_fcn(object):\n",
    "    def __init__(self):\n",
    "        self.functions = {\n",
    "            'linear': self.linear,\n",
    "            'sigmoid': self.logistic,\n",
    "            'logistic': self.logistic,\n",
    "            'tanh': self.tanh,\n",
    "            'ReLu': self.relu\n",
    "        }\n",
    "\n",
    "    def output(self, activation_potential, name):\n",
    "        if name in self.functions:\n",
    "            return self.functions[name](activation_potential)\n",
    "        else:\n",
    "            sys.exit(f\"Error: Activation function '{name}' not found.\")\n",
    "\n",
    "    def linear(self, x):\n",
    "        return x  # Zwraca bezpośrednio potencjał aktywacji\n",
    "\n",
    "    def logistic(self, x):\n",
    "        return 1 / (1 + np.exp(-x))  # Użycie bezpośredniego potencjału\n",
    "\n",
    "    def tanh(self, x):\n",
    "        return np.tanh(x)  # Użycie bezpośredniego potencjału\n",
    "\n",
    "    def relu(self, x):\n",
    "        return np.maximum(0, x)  # Użycie bezpośredniego potencjału"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "2d73baa8",
   "metadata": {},
   "outputs": [],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    structure = [{'type': 'input', 'units': 1},\n",
    "                 {'type': 'dense', 'units': 8, 'activation_function': 'tanh'},\n",
    "                 {'type': 'dense', 'units': 8, 'activation_function': 'tanh'},\n",
    "                 {'type': 'dense', 'units': 1, 'activation_function': 'linear'}]\n",
    "    \n",
    "    model = Neural_network(structure, 'rand')\n",
    "    #print(model.nnetwork)\n",
    "\n",
    "    model_zero = Neural_network(structure, 'zero')\n",
    "    #print(model_zero.nnetwork)\n",
    "\n",
    "    model_one = Neural_network(structure, 'one')\n",
    "    #print(model_one.nnetwork)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "3539aea2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[array([0.])]\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    structure = [{'type': 'input', 'units': 1},\n",
    "                 {'type': 'dense', 'units': 2, 'activation_function': 'linear'},\n",
    "                 {'type': 'dense', 'units': 1, 'activation_function': 'linear'}]\n",
    "    network = model.create_network(structure, \"zero\")\n",
    "    n = 1\n",
    "    X = np.linspace(-5, 5, n).reshape(-1, 1)\n",
    "    \n",
    "    predicted1 = model.predict(network, X)\n",
    "    print(predicted1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "c5fcbf05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[array([-0.95857383])]\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    structure = [{'type': 'input', 'units': 1},\n",
    "                 {'type': 'dense', 'units': 2, 'activation_function': 'tanh'},\n",
    "                 {'type': 'dense', 'units': 2, 'activation_function': 'tanh'},\n",
    "                 {'type': 'dense', 'units': 1, 'activation_function': 'tanh'}]\n",
    "    network = model.create_network(structure, \"one\")\n",
    "    n = 1\n",
    "    X = np.linspace(-5, 5, n).reshape(-1, 1)\n",
    "    predicted2 = model.predict(network, X)\n",
    "    print(predicted2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e9bfe1f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[array([6.22695315])]\n"
     ]
    }
   ],
   "source": [
    "if __name__ == \"__main__\":\n",
    "    structure = [{'type': 'input', 'units': 1},\n",
    "                 {'type': 'dense', 'units': 4, 'activation_function': 'ReLu'},\n",
    "                 {'type': 'dense', 'units': 4, 'activation_function': 'ReLu'},\n",
    "                 {'type': 'dense', 'units': 1, 'activation_function': 'ReLu'}]\n",
    "    network = model.create_network(structure, \"rand\")\n",
    "    n = 1\n",
    "    X = np.linspace(-5, 5, n).reshape(-1, 1)\n",
    "    predicted3 = model.predict(network, X)\n",
    "    print(predicted3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3f88e0d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
